# 증가식
a <- a + 1
}
a <- 1
while(a <= 10){
if ( a > 5 ){
break
}
print(a)
# 증가식
a <- a + 1
}
a <- 1
while(a <= 10){
# 증가식
a <- a + 1
if ( a > 5 ){
break
}
print(a)
}
a <- 1
while(a <= 10){
# 증가식
a <- a + 1
# if ( a > 5 ){
#   break
# }
print(a)
}
# 1부터 1씩 증가시킨 누적합이 20000이 넘어갈때가 언제인가?
result <- 0
for (i in 1:5000){
result <- result + i
}
result
# 1부터 1씩 증가시킨 누적합이 20000이 넘어갈때가 언제인가?
# step1 : 1부터 5000까지 누적합
# step2 : 누적합이 20000이상이라면 조건문을 이용하여
#         반복문을 강제 종료 ( if (result >= 20000){ break } )
result <- 0
for (i in 1:5000){
# 1
if (result >= 20000){
break
}
result <- result + i
# 2
# if (result >= 20000){
#   break
# }
}
result
# 1부터 1씩 증가시킨 누적합이 20000이 넘어갈때가 언제인가?
# step1 : 1부터 5000까지 누적합
# step2 : 누적합이 20000이상이라면 조건문을 이용하여
#         반복문을 강제 종료 ( if (result >= 20000){ break } )
result <- 0
for (i in 1:5000){
# 1
# if (result >= 20000){
#   break
# }
result <- result + i
# 2
if (result >= 20000){
break
}
}
result
i
# 1부터 1씩 증가시킨 누적합이 20000이 넘어갈때가 언제인가?
# step1 : 1부터 5000까지 누적합
# step2 : 누적합이 20000이상이라면 조건문을 이용하여
#         반복문을 강제 종료 ( if (result >= 20000){ break } )
result <- 0
for (i in 1:5000){
# 1
if (result >= 20000){
break
}
result <- result + i
# 2
# if (result >= 20000){
#   break
# }
}
result
i
result <- 0
result2 <- 0
for (j in 1:200){
result2 <- result2 + j
}
result2
# 합계 초기값
result_while <- 0
a <- 1
# 합계 초기값
result_while <- 0
a <- 1
while (TRUE){
# 1
result_while <- result_while + a
# 2
if (result_while >= 20000){
break
}
a <- a + 1
# 3
# if (result_while >= 20000){
#   break
# }
}
print(c(a, result_while))
# 합계 초기값
result_while <- 0
a <- 1
while (TRUE){
# 1
result_while <- result_while + a
# 2
# if (result_while >= 20000){
#   break
# }
a <- a + 1
# 3
if (result_while >= 20000){
break
}
}
print(c(a, result_while))
# 반복실행되는 코드(36)
}
# 첫번째 주사위의 경우의 수를 반복문 작성
for (i in 1:6){
# 두번째 주사위의 경우의 수를 반복문 작성
for (j in 1:6){
# 반복실행되는 코드(36)
# 두개의 주사위의 합(i + j)이 10인 -> 조건식
if (i + j == 10){
print(c(i, j))
}
}
# 반복실행되는 코드 (6)
}
# while문 작성
# 다중 while문
# 초기값(2개)
i <- 1
j <- 1
# 첫번째 주사위의 경우의 수
while (i < 7){
# 두번째 주사위의 경우의 수
while (j < 7){
# 두개의 주사위의 합이 10이라면
if (i + j == 10){
print(c(i, j))
}
# j를 1씩 증가시킨다.
j <- j + 1
}
# i를 1씩 증가시킨다.
i <- i + 1
}
# while문 작성
# 다중 while문
# 초기값(2개)
i <- 1
j <- 1
# 첫번째 주사위의 경우의 수
while (i < 7){
## 1
j <- 1
# 두번째 주사위의 경우의 수
while (j < 7){
# 두개의 주사위의 합이 10이라면
if (i + j == 10){
print(c(i, j))
}
# j를 1씩 증가시킨다.
j <- j + 1
}
## 2
# i를 1씩 증가시킨다.
i <- i + 1
}
# while문 작성
# 다중 while문
# 초기값(2개)
i <- 1
j <- 1
# 첫번째 주사위의 경우의 수
while (i < 7){
## 1
# j <- 1
# 두번째 주사위의 경우의 수
while (j < 7){
# 두개의 주사위의 합이 10이라면
if (i + j == 10){
print(c(i, j))
}
# j를 1씩 증가시킨다.
j <- j + 1
}
## 2
j <- 1
# i를 1씩 증가시킨다.
i <- i + 1
}
# 매개변수와 인자가 존재하지 않는 경우
func_1 <-  function(){
print('Hello R')
}
# 함수 호출
func_1()
# 매개변수가 존재하지 않는 함수에 인자 입력
func_1('a')
# 매개변수 존재하는 함수 생성
func_2 <- function(x, y){
# 매개변수는 2개
return (x + y)
}
# func_2()함수를 호출 -> 매개변수 2개 -> 인자 2개
func_2(3, 4)
func_2(10, 2)
func_3 <- function(x, y){
return (x ^ y)
}
func_3(10, 2)
func_3(2, 10)
# func_3에 x에는 2를 대입 y에는 10를 대입하겠다
func_3(y = 10, x = 2)
# 매개변수에 기본값이 존재하는 함수
func_4 <- function(x, y = 3, z = 2){
return ( (x + y) ^ z )
}
func_4(1)
func(1, 2)
func_4(1, 2)
func_4(2, 3, 3)
func_4(2, z = 3)
# 인자의 개수가 가변인 경우
func_5 <- function(...){
print(typeof(...))
}
func_5(1, 2, 3, 4, 5)
# 인자의 개수가 가변인 경우
func_5 <- function(...){
print(c(...))
}
func_5(1, 2, 3, 4, 5)
func_5(1, 6, 3)
func_5(1, 2,3 , 4, 5, 6, 7, 8, 9, 10)
# 합계를 구하는 함수 생성
# 인자가 가변인 경우
func_sum <- function(...){
# 누적합을 할수 있는 데이터를 생성
result <- 0
# ... 데이터를 반복 실행하여 result에 누적합
for (i in c(...)){
result <- result + i
}
# 누적합이 된 결과값을 되돌려준다.
return (result)
}
func_sum(1, 2, 3, 4, 5)
func_sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
func_sum(10, 3)
# 인자를 벡터데이터로 입력 하는 경우
func_sum_2 <- function(x){
# x에는 벡터데이터가 입력 가정
result <- 0
for (i in x){
result <- result + i
}
return (result)
}
func_sum_2( c(1, 2, 3, 4, 5) )
func_sum_2(1, 2, 3)
# 함수 생성
# 매개변수 2개 사용
# 시작값, 종료값
func_sum_3 <- function(start, end){
result <- 0
for (i in start:end){
result <- result + i
}
return (result)
}
func_sum_3(1, 10)
func_sum_3(10, 1)
func_sum_4 <- function(start, end){
result <- 0
while (start <= end){
result <- start + result
start <- start + 1
}
return (result)
}
func_sum_4(1, 10)
func_sum_4(10, 1)
func_sum_4 <- function(start, end){
result <- 0
if (start < end){
while (start <= end){
result <- start + result
start <- start + 1
}
}else{
while (end <= start){
result <- result + end
end <- end + 1
}
}
return (result)
}
func_sum_4(1, 10)
source("~/.active-rstudio-document", echo = TRUE)
func_sum_4(10, 1)
func_sum_5 <- function(start, end){
result <- 0
if (start < end){
s <- start
e <- end
}else{
s <- end
e <- start
}
while (s <= e){
result <- result + s
s <- s + 1
}
return (result)
}
func_sum_5(1, 10)
func_sum_5(10, 1)
# 함수를 생성
# 인자의 개수가 가변
# 해당하는 인자들의 평균값을 출력하는 함수
func_mean <- function(...){
# 합계를 구하기 위한 초기 값 0
sum_data <- 0
# 개수를 확인하기 위한 변수 생성 0
cnt <- 0
# 반복문을 생성
for (i in c(...)){
# 누적합
sum_data <- sum_data + i
# 반복 실행할때마다 개수를 1씩 증가
cnt <- cnt + 1
}
# 누적합과 개수를 나눠준 값을 되돌려준다.
return (sum_data / cnt)
}
func_mean(2, 4, 6, 8, 10)
# 커스텀 연산자
"%s%" <- function(x, y){
return ( (x+y) ^ y )
}
5 %s% 2
func_6 <- function(x,y){
return ( (x+y) ^ y )
}
func_6(5, 2)
# 데이터프레임
# 데이터의 분석에서 가장 많이 사용되는
# 2차원 데이터의 형태
names <- c('test', 'test2', 'test3')
grade <- c(1, 2, 2)
# 벡터데이터를 이용해서 데이터프레임을 생성
# 같은 길이의 벡터데이터를 이용
student <- data.frame(names, grade)
student
typeof(student)
midturm <- c(70, 80, 90)
final <- c(100, 90, 95)
score <- cbind(midturm, final)
score
typeof(score)
# 벡터데이터 생성
gender <- c('F', 'F', 'M')
# 데이터프레임, 행렬, 벡터 데이터를 결합
data.frame( student, score )
# 데이터프레임, 행렬, 벡터 데이터를 결합
data.frame( student, score, gender )
# 데이터프레임, 행렬, 벡터 데이터를 결합
data.frame( student, score, gender ) -> students
# 특정 컬럼의 데이터를 확인
# 데이터프레임명$컬럼명
students$midturm
# 데이터프레임명[[컬럼명]]
students[ ['names'] ]
# 데이터프레임명[[컬럼명]]
students[['names']]
# 데이터프레임명[[컬럼의위치]]
students[[2]]
students[1]
source("C:/ubion_2025_2/R/20250516.R", echo = TRUE)
# 특정 인덱스의 데이터를 확인
students[1, ]
# 특정 인덱스의 데이터를 확인
students[1, 3]
students[1, 3]
# 2, 3번 학생의 중간과 기말 성적을 추출
students[  c(2, 3), c('midturm', 'final') ]
students[ c(1), c(3) ]
# 조건식을 이용해서 데이터프레임 필터링
# 중간 성적이 80점 이상인 학생의 정보를 확인
students$midturm
# 조건식을 이용해서 데이터프레임 필터링
# 중간 성적이 80점 이상인 학생의 정보를 확인
students$midturm >= 80
# 조건식을 이용해서 데이터프레임 필터링
# 중간 성적이 80점 이상인 학생의 정보를 확인
students$midturm >= 80 -> flag
# flag는 인덱스의 조건식
# 컬럼의 조건식 -> names, grade, gender
students[ flag, c('names', 'grade', 'gender') ]
# 데이터를 추가 (행을 추가)
# 데이터의 형태가 같은 행을 추가
new_student <- data.frame(
name = 'test4',
gender = 'M',
final = '70',
midtirm = '60',
grade = 3
)
new_student
# 데이터를 추가 (행을 추가)
# 데이터의 형태가 같은 행을 추가
new_student <- data.frame(
names = 'test4',
gender = 'M',
final = '70',
midtirm = '60',
grade = 3
)
new_student
# 데이터를 추가 (행을 추가)
# 데이터의 형태가 같은 행을 추가
new_student <- data.frame(
names = 'test4',
gender = 'M',
final = '70',
midturm = '60',
grade = 3
)
new_student
# students와 new_student를 행 결합
rbind(students, new_student)
# students와 new_student를 행 결합
rbind(students, new_student) -> students
# 파생변수 생성 -> 열 결합
# 중간 성적과 기말 성적을 더한 총 점수 생성
students$midturm + students$final
# 파생변수 생성 -> 열 결합
# 중간 성적과 기말 성적을 더한 총 점수 생성
students$midturm
# 데이터프레임, 행렬, 벡터 데이터를 결합
data.frame( student, score, gender ) -> students
# 데이터를 추가 (행을 추가)
# 데이터의 형태가 같은 행을 추가
new_student <- data.frame(
names = 'test4',
gender = 'M',
final = 70,
midturm = 60,
grade = 3
)
# students와 new_student를 행 결합
rbind(students, new_student) -> students
# 파생변수 생성 -> 열 결합
# 중간 성적과 기말 성적을 더한 총 점수 생성
students$midturm
# 파생변수 생성 -> 열 결합
# 중간 성적과 기말 성적을 더한 총 점수 생성
students$midturm + students$final
# 파생변수 생성 -> 열 결합
# 중간 성적과 기말 성적을 더한 총 점수 생성
students$midturm + students$final -> total
# 열 결합 -> cbind()
cbind(students, total)
# 열 결합 -> cbind()
cbind(students, total) -> students
# 평균 점수 컬럼을 생성
students$total
# 평균 점수 컬럼을 생성
students$total /2
# 평균 점수 컬럼을 생성
students$total / 2
students$mean
# 평균 점수 컬럼을 생성
students$total / 2 -> students$mean
students
# 외부의 csv 파일을 로드 -> 함수를 이용
# csv 파일을 로드하여 데이터프레임으로 생성
# 상대 경로로 파일 로드
df <- read.csv('../csv/csv_exam.csv')
df
# 절대 경로로 파일의 로드
df2 <- read.csv('C:\ubion_2025_2\csv\csv_exam.csv')
# 절대 경로로 파일의 로드
df2 <- read.csv('C:\\ubion_2025_2\\csv\\csv_exam.csv')
df2
# 외부의 csv 파일을 로드 -> 함수를 이용
# csv 파일을 로드하여 데이터프레임으로 생성
# 상대 경로로 파일 로드
df <- read.csv('../csv/csv_exam.csv')
df
# 절대 경로로 파일의 로드
df2 <- read.csv('C:\\ubion_2025_2\\csv\\csv_exam.csv')
